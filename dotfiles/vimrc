"
" avtobiff's vimrc
"
" Table of Contents
" 1.  Appearance
" 2.  Behaviour
" 3.  Autocommands

"
" 1. Appearance
"
set t_Co=256
colorscheme inkpot

syntax enable
set number
set showmode
set showcmd
set title

" Status line
set laststatus=2                            " always show status line
set statusline=
set statusline +=\ %n                       " buffer number
set statusline +=\ %.30{getcwd()}           " clipped working directory
set statusline +=\ %#error#%*               " highlight error
set statusline +=\ %{&paste?'[paste]':''}   " show paste mode
set statusline +=\ \ %h%m%r%w\ %<%F         " help/modified/readonly/preview,
                                            " clipped full path
set statusline +=%=\ <\ %{&ff}              " middle delimiter, file format
set statusline +=\ <\ %{strlen(&fenc)?&fenc:'none'}
                                            " file encoding or "none"
set statusline +=\ <\ %y                    " file type
set statusline +=\ <\ %3.6l/%L\ (%P)        " current line/total lines (Top/Bot)
set statusline +=\ %2.3c\                   " character column

" Current status line white on black, non-current grey on black
highlight StatusLine   cterm=NONE ctermbg=0 ctermfg=255
highlight StatusLineNC cterm=NONE ctermbg=0 ctermfg=242

" Paint background black within 80 characters and grey outside
let &colorcolumn=join(range(81,999),",")
highlight ColorColumn ctermbg=235

" Hilight whitespace with green color
set list!
set listchars=tab:.\ ,trail:-
highlight WhiteSpace ctermfg=2
match WhiteSpace /\s\+$\| \+\ze\t\|\t/

" Nice looking highlight for gitcommit
highlight diffAdded   ctermfg=2
highlight diffRemoved ctermfg=1



"
" 2. Behaviour
"
set nocompatible

set directory=~/.vim/swp

set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

set autoindent
filetype plugin indent on

set incsearch
set hlsearch

set showmatch



"
" 3. Autocommands
"

" Some file types should wrap their text
function! s:setupWrapping()
    set textwidth=78
endfunction

" Filetypes
if has("autocmd")
    " Remember last location in file, but not for commit messages.
    " see :help last-position-jump
    au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif

    " In Makefiles, use real tabs, not tabs expanded to spaces
    au FileType make setlocal noexpandtab

    " Make sure all markdown files have the correct filetype set and setup
    " wrapping
    au BufRead,BufNewFile *.{md,mdwn} set filetype=markdown | call s:setupWrapping()

    " Treat JSON files like JavaScript
    au BufNewFile,BufRead *.json set ft=javascript
endif
